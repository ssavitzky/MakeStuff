#!/bin/bash
#  Recursively find all directories with git repos, and try to pull them.
#  If we start in a directory that has a repo, we only pull subdirectories
#  that have the same origin.  If the current directory does _not_ have a
#  repo, run pull-all in all subdirectories it exists in.


has_origin () {
    [[ -d $1/.git ]] && (git -C $1 remote | grep -q origin)
}

get_origin () {
    git -C $1 remote get-url origin | sed -E 's/^[^@]*\@([^:]*).*$/\1/'
}

if has_origin .; then
    GIT_HOST=$(get_origin .)
fi

NO_OP=false
TIME=0
VERBOSE=false
default_s='default '
default_t='default '

usage () {
    cat <<EOF
$0 [options]
   If the current directory has a git origin,
      pull it and all all subdirectories with the same origin.
   Otherwise, recurse into each subdirectory that either
      has an origin or a copy of pull-all
   options:
      -h or --help	   - print this message and exit
      -n or --no-op  	   - print directories without pulling
      -s or --site SITE    - pull if origin matches SITE (can be a basic regex)
      -t or --time TIME    - wait TIME seconds between pulls (${default_t}$TIME)
      -v or --verbose	   - print more information 
EOF
}

while [[ ! -z "$1" ]]; do
    case $1 in
	(-h | --help)
	    usage; exit
	    ;;
	(-n | --no-op)
	    NO_OP=true
	    shift
	    ;;
	(-s | --site)
	    shift
	    GIT_HOST="$1"
	    default_s=
	    shift
	    ;;
	(-t | --time)
	    shift
	    TIME=$1
	    default_t=
	    shift
	    ;;
	(-v | --verbose)
	    VERBOSE=true
	    shift
	    ;;
	(*)
	    usage
	    exit
	    ;;
    esac
done

if [[ -z $GIT_HOST ]]; then
    for d in *; do
	 if [[ ! -L $d ]] && has_origin $d; then
	     (echo '  *' $d ; cd $d; ../pull-all "$@")
	 elif  [[ ! -L $d ]] && [[ -x $d/pull-all ]] ; then
	     (echo '***' $d ; cd $d; ./pull-all "$@")
	 fi
    done
    exit
fi

$VERBOSE && echo $PWD pulling from $GIT_HOST

flags="${*:---ff-only}"
repos=`find . -name .git -print | sort`
pfx='   '

for f in $repos; do
    if has_origin $f; then
	if get_origin $f | grep -q "$GIT_HOST"; then
	    echo -ne "$pfx" $(dirname $f)"\t"
	    # note: pull has to be done from a working tree, not a repo.
	    $NO_OP || git -C $(dirname $f) pull $flags
	    $NO_OP && echo
	    sleep $TIME # some sites restrict you to some small number of ssh connections
    	    # in a row, so throttle back.  Better to use controlmaster if you can
	else
	    $VERBOSE && echo -e "$pfx" $(dirname $f)"\t ***" origin not $GIT_HOST
	fi
    elif [[ -d $f ]]; then
	$VERBOSE && echo -e "$pfx" $(dirname $f)"\t ***" no origin
    else
	$VERBOSE && echo -e "$pfx" $(dirname $f)"\t ***" .git not a directory
    fi
done
